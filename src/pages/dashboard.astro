---
import Layout from "../layouts/Layout.astro";
import MoneyCard from "../components/MoneyCard.astro";
import Table from "../components/Table.astro";
import Header from "../components/Header.astro";
import type { Bank } from "../models/bank";
import type { Debt } from "../models/debt";
import type { Transaction } from "../models/transaction";
import { csvToTransactions } from "../utils/csvParser";
import {
  createTransactions,
  getUserTransactions,
} from "../controllers/transactionController";
import {
  getUserBanks,
  type DefaultResponse,
} from "../controllers/userController";
import {
  getUserDebts,
  payDebt,
  createDebt,
  deleteDebt,
} from "../controllers/debtController";

if (!Astro.cookies.has("token")) {
  return Astro.redirect("/login");
}

const token = Astro.cookies.get("token")?.value;

let banks: Bank[] = [];
let debts: Debt[] = [];
let bankId = "";
let transactions: Transaction[] = [];
let balance = +(Astro.cookies.get("balance")?.value || 0);
let page = 1;
let pages = 1;
let error: string = "";

if (Astro.request.method === "GET") {
  const pageNumber = Astro.url.searchParams.get("page") || "";
  if (pageNumber) {
    page = +pageNumber;
  }
}

try {
  const response = await getUserBanks(token || "");
  const decoded = (await response.json()) as DefaultResponse;

  if (decoded.status === 401) {
    return Astro.redirect("/logout");
  }

  if (decoded.message === "error") {
    console.error(decoded.data);
    error = decoded.data;
  }

  if (decoded.message === "success") {
    banks = decoded.data;
  }

  bankId = banks[0].id; //User will only have 1 bank for now

  const debtsResponse = await getUserDebts(token || "");
  const debtsDecoded = (await debtsResponse.json()) as DefaultResponse;

  if (debtsDecoded.status === 401) {
    return Astro.redirect("/logout");
  }

  if (debtsDecoded.message === "error") {
    console.error(debtsDecoded.data);
    error = debtsDecoded.data;
  }

  if (debtsDecoded.message === "success") {
    debts = debtsDecoded.data;
  }

  const transactionsResponse = await getUserTransactions(
    token || "",
    bankId,
    page
  );
  const transactionsDecoded =
    (await transactionsResponse.json()) as DefaultResponse;

  if (transactionsDecoded.status === 401) {
    return Astro.redirect("/logout");
  }

  if (transactionsDecoded.message === "error") {
    console.error(transactionsDecoded.data);
    error = transactionsDecoded.data;
  }

  if (transactionsDecoded.message === "success") {
    transactions = transactionsDecoded.data.transactions;
    page = transactionsDecoded.data.paginator.page;
    if (page === 1) {
      Astro.cookies.set("balance", transactions[0].balance.toString());
    }
    pages = transactionsDecoded.data.paginator.pages;
  }
} catch (error) {
  if (error instanceof Error) {
    console.error(error.message, "ERROR");
  }
}

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const csvFile = data.get("csvFile") as File;
    const paymentAmount = +(data.get("paymentAmount") || 0);
    const debtName = data.get("debtName") as string;
    const debtAction = data.get("debtAction") as string;
    const debtDescription = data.get("debtDescription") as string;
    const debtAmount = +(data.get("debtAmount") || 0);

    if (debtDescription && debtName && debtAmount) {
      const newDebt: Debt = {
        name: debtName,
        description: debtDescription,
        amount: debtAmount,
        payed: 0,
      };
      const response = await createDebt(token || "", newDebt);
      const decoded = (await response.json()) as DefaultResponse;

      if (decoded.status === 401) {
        return Astro.redirect("/logout");
      }

      if (decoded.message === "error") {
        console.error(decoded.data);
        error = decoded.data;
      }
    }

    if (debtAction === "delete" && debtName) {
      const response = await deleteDebt(token || "", debtName);
      const decoded = (await response.json()) as DefaultResponse;

      if (decoded.status === 401) {
        return Astro.redirect("/logout");
      }

      if (decoded.message === "error") {
        console.error(decoded.data);
        error = decoded.data;
      }
    }

    if (paymentAmount && debtName) {
      const response = await payDebt(token || "", debtName, paymentAmount);
      const decoded = (await response.json()) as DefaultResponse;

      if (decoded.status === 401) {
        return Astro.redirect("/logout");
      }

      if (decoded.message === "error") {
        console.error(decoded.data);
        error = decoded.data;
      }
    }

    if (csvFile) {
      const csvData = await csvFile.text();
      const transactions = csvToTransactions(csvData, bankId);
      const response = await createTransactions(token || "", transactions);
      const decoded = (await response.json()) as DefaultResponse;

      if (decoded.status === 401) {
        return Astro.redirect("/logout");
      }

      if (decoded.message === "error") {
        console.error(decoded.data);
        error = decoded.data;
      }

      if (decoded.message === "partial") {
        console.error(decoded.data);
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message, "ERROR");
    }
  } finally {
    return Astro.redirect("/dashboard");
  }
}
---

<Layout title="Dashboard | Money moon">
  <Header banks={banks} />
  <div class="flex flex-col items-center gap-16 mb-16">
    <div class="flex flex-wrap gap-8 justify-center mt-12">
      <MoneyCard amount={balance} label="Bank Balance" />
      {debts && debts.map((debt) => <MoneyCard debt={debt} />)}
      <MoneyCard isNew={true} />
    </div>
    <Table data={transactions} page={page} pages={pages} />
  </div>
</Layout>
