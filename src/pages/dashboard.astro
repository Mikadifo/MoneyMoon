---
import Layout from "../layouts/Layout.astro";
import MoneyCard from "../components/MoneyCard.astro";
import GroupCard from "../components/GroupCard.astro";
import BalanceCard from "../components/BalanceCard.astro";
import CardsSection from "../components/CardsSection.astro";
import Search from "../components/Search.astro";
import Table from "../components/Table.astro";
import Header from "../components/Header.astro";
import type { Bank } from "../models/bank";
import type { Debt } from "../models/debt";
import type { Group } from "../models/group";
import type { Transaction } from "../models/transaction";
import { csvToTransactions } from "../utils/csvParser";
import {
  createTransactions,
  getUserTransactions,
  searchTransactions,
} from "../controllers/transactionController";
import {
  getUserBanks,
  type DefaultResponse,
} from "../controllers/userController";
import {
  getUserDebts,
  payDebt,
  createDebt,
  deleteDebt,
} from "../controllers/debtController";
import {
  addTransactions,
  getUserGroups,
  createGroup,
} from "../controllers/groupController";
import AddGroupDialog from "../components/AddGroupDialog.astro";
import EditGroupDialog from "../components/EditGroupDialog.astro";

if (!Astro.cookies.has("token")) {
  return Astro.redirect("/login");
}

const token = Astro.cookies.get("token")?.value;

let banks: Bank[] = [];
let debts: Debt[] = [];
let bankId = "";
let transactions: Transaction[] = [];
let groups: Group[] = [];
let balance = +(Astro.cookies.get("balance")?.value || 0);
let page = 1;
let pages = 1;
let searchQuery = "";
let error: string = "";

if (Astro.request.method === "GET") {
  const pageNumber = Astro.url.searchParams.get("page") || "";
  const searchParam = Astro.url.searchParams.get("searchQuery") || "";

  if (searchParam) {
    searchQuery = searchParam;
  }

  if (pageNumber) {
    page = +pageNumber;
  }
}

const fetchBanks = async () => {
  const response = await getUserBanks(token || "");
  const decoded = (await response.json()) as DefaultResponse;

  if (decoded.status === 401) {
    return Astro.redirect("/logout");
  }

  if (decoded.message === "error") {
    console.error(decoded.data);
    error = decoded.data;
  }

  if (decoded.message === "success") {
    banks = decoded.data;
  }

  bankId = banks[0].id; //User will only have 1 bank for now
};

const fetchDebts = async () => {
  const response = await getUserDebts(token || "");
  const decoded = (await response.json()) as DefaultResponse;

  if (decoded.status === 401) {
    return Astro.redirect("/logout");
  }

  if (decoded.message === "error") {
    console.error(decoded.data);
    error = decoded.data;
  }

  if (decoded.message === "success") {
    debts = decoded.data;
  }
};

const fetchFilteredTransactions = async () => {
  const response = await searchTransactions(
    token || "",
    bankId,
    searchQuery,
    page
  );
  const decoded = (await response.json()) as DefaultResponse;

  if (decoded.status === 401) {
    return Astro.redirect("/logout");
  }

  if (decoded.message === "error") {
    console.error(decoded.data);
    error = decoded.data;
  }

  if (decoded.message === "success") {
    transactions = decoded.data.transactions;
    page = decoded.data.paginator.page;
    pages = decoded.data.paginator.pages;
  }
};

const fetchTransactions = async () => {
  const response = await getUserTransactions(token || "", bankId, page);
  const decoded = (await response.json()) as DefaultResponse;

  if (decoded.status === 401) {
    return Astro.redirect("/logout");
  }

  if (decoded.message === "error") {
    console.error(decoded.data);
    error = decoded.data;
  }

  if (decoded.message === "success") {
    transactions = decoded.data.transactions;
    page = decoded.data.paginator.page;
    if (page === 1) {
      Astro.cookies.set("balance", transactions[0].balance.toString());
    }
    pages = decoded.data.paginator.pages;
  }
};

const fetchGroups = async () => {
  const response = await getUserGroups(token || "");
  const decoded = (await response.json()) as DefaultResponse;

  if (decoded.status === 401) {
    return Astro.redirect("/logout");
  }

  if (decoded.message === "error") {
    console.error(decoded.data);
    error = decoded.data;
  }

  if (decoded.message === "success") {
    groups = decoded.data;
  }
};

try {
  await fetchBanks();
  await fetchDebts();
  if (searchQuery) {
    await fetchFilteredTransactions();
  } else {
    await fetchTransactions();
  }
  await fetchGroups();
} catch (error) {
  if (error instanceof Error) {
    console.error(error.message, "ERROR");
  }
}

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const csvFile = data.get("csvFile") as File;
    const paymentAmount = +(data.get("paymentAmount") || 0);
    const debtName = data.get("debtName") as string;
    const debtAction = data.get("debtAction") as string;
    const debtDescription = data.get("debtDescription") as string;
    const debtAmount = +(data.get("debtAmount") || 0);
    const groupId = data.get("groupId") as string;
    const groupAction = data.get("groupAction") as string;
    const groupTransactions = data.get("groupTransactions") as string;
    const groupName = data.get("groupName") as string;

    if (groupName) {
      const response = await createGroup(token || "", groupName);
      const decoded = (await response.json()) as DefaultResponse;

      if (decoded.status === 401) {
        return Astro.redirect("/logout");
      }

      if (decoded.message === "error") {
        console.error(decoded.data);
        error = decoded.data;
      }
    }

    if (groupId && groupTransactions && groupAction === "add") {
      const transactionIds = groupTransactions.split(",");
      const response = await addTransactions(
        token || "",
        groupId,
        transactionIds
      );
      const decoded = (await response.json()) as DefaultResponse;

      if (decoded.status === 401) {
        return Astro.redirect("/logout");
      }

      if (decoded.message === "error") {
        console.error(decoded.data);
        error = decoded.data;
      }
      //TODO: show notification if success
    }

    if (debtDescription && debtName && debtAmount) {
      const newDebt: Debt = {
        name: debtName,
        description: debtDescription,
        amount: debtAmount,
        payed: 0,
      };
      const response = await createDebt(token || "", newDebt);
      const decoded = (await response.json()) as DefaultResponse;

      if (decoded.status === 401) {
        return Astro.redirect("/logout");
      }

      if (decoded.message === "error") {
        console.error(decoded.data);
        error = decoded.data;
      }
    }

    if (debtAction === "delete" && debtName) {
      const response = await deleteDebt(token || "", debtName);
      const decoded = (await response.json()) as DefaultResponse;

      if (decoded.status === 401) {
        return Astro.redirect("/logout");
      }

      if (decoded.message === "error") {
        console.error(decoded.data);
        error = decoded.data;
      }
    }

    if (paymentAmount && debtName) {
      const response = await payDebt(token || "", debtName, paymentAmount);
      const decoded = (await response.json()) as DefaultResponse;

      if (decoded.status === 401) {
        return Astro.redirect("/logout");
      }

      if (decoded.message === "error") {
        console.error(decoded.data);
        error = decoded.data;
      }
    }

    if (csvFile) {
      const csvData = await csvFile.text();
      const transactions = csvToTransactions(csvData, bankId);
      const response = await createTransactions(token || "", transactions);
      const decoded = (await response.json()) as DefaultResponse;

      if (decoded.status === 401) {
        return Astro.redirect("/logout");
      }

      if (decoded.message === "error") {
        console.error(decoded.data);
        error = decoded.data;
      }

      if (decoded.message === "partial") {
        console.error(decoded.data);
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message, "ERROR");
    }
  } finally {
    return Astro.redirect("/dashboard");
  }
}
---

<Layout title="Dashboard | Money moon">
  <Header banks={banks} />
  <AddGroupDialog />
  <EditGroupDialog />
  <div class="flex flex-col gap-16 mx-16 my-4">
    <CardsSection title="Balances">
      <BalanceCard amount={balance} label="Bank Balance" />
      {
        groups &&
          groups.map(({ name, total }) => (
            <BalanceCard amount={balance - total} label={`Bank - ${name}`} />
          ))
      }
    </CardsSection>
    <CardsSection title="Debts">
      {debts && debts.map((debt) => <MoneyCard debt={debt} />)}
      <MoneyCard isNew={true} />
    </CardsSection>
    <CardsSection title="Groups">
      {
        groups &&
          groups.map((group) => <GroupCard token={token} group={group} />)
      }
      <GroupCard isNew={true} />
    </CardsSection>
    <div class="inline-block xl:mx-auto">
      <Search query={searchQuery} />
      <Table
        groups={groups}
        data={transactions}
        page={page}
        pages={pages}
        query={searchQuery}
      />
    </div>
  </div>
</Layout>
