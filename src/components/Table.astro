---
export interface Props {
  data: any[];
  page: number;
  pages: number;
}

const HEAD_ELEMENTS = ["Date", "Type", "Description", "Amount", "Balance"];

const { data, page, pages } = Astro.props;
---

<div class="inline-block xl:mx-auto">
  <div id="selection-controls" class="hidden gap-4 mb-4">
    <button class="bg-main font-display font-bold text-white px-4 rounded-md"
      >Add to group</button
    >
    <button class="bg-main font-display font-bold text-white px-4 rounded-md">
      Add to new group</button
    >
    <button
      id="cancel-selection"
      class="bg-black/30 font-display font-bold text-black px-4 rounded-md"
    >
      Cancel</button
    >
  </div>
  <div
    class="rounded-2xl bg-[#fff] px-8 py-4 overflow-auto inline-block w-full xl:w-auto"
  >
    <table class="text-left text-black">
      <thead class="font-bold font-display text-xl uppercase">
        <tr>
          {
            HEAD_ELEMENTS.map((element) => (
              <th scope="col" class="px-4 py-4">
                {element}
              </th>
            ))
          }
        </tr>
      </thead>
      <tbody class="font-body text-xl">
        {
          data.map((row) => (
            <tr id={row.id} class="table-row hover:bg-black/10 cursor-pointer">
              <td scope="row" class="px-4 py-4 whitespace-nowrap">
                {row.date}
              </td>
              <td scope="row" class="px-4 py-4 whitespace-nowrap">
                {row.type}
              </td>
              <td scope="row" class="px-4 py-4 whitespace-nowrap">
                {row.description}
              </td>
              <td
                scope="row"
                class={`px-5 py-4 whitespace-nowrap ${row.amount > 0 ? "text-success" : "text-error"}`}
              >
                $ {row.amount}
              </td>
              <td scope="row" class="px-4 py-4 whitespace-nowrap">
                $ {row.balance}
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>
  <form
    method="GET"
    class="mt-4 me-8 flex justify-end items-center text-xl font-body"
  >
    {
      page > 1 && (
        <button
          type="button"
          id="previous-page-button"
          class="bg-secondary rounded-lg px-4 py-1 font-bold me-4"
        >
          Previous
        </button>
      )
    }
    Page
    <input
      type="number"
      value={page}
      id="page-number"
      name="page"
      min="1"
      max={pages}
      class="w-16 mx-2 px-2 rounded-lg"
    />
    of {pages}
    {
      page < pages && (
        <button
          type="button"
          id="next-page-button"
          class="bg-secondary rounded-lg px-4 py-1 font-bold ms-4"
        >
          Next
        </button>
      )
    }
  </form>
</div>

<script>
  const $pageNumber = document.getElementById(
    "page-number"
  ) as HTMLInputElement;
  const $nextPageButton = document.getElementById("next-page-button");
  const $previousPageButton = document.getElementById("previous-page-button");
  const $tableRows = document.getElementsByClassName("table-row");
  const $selectionControls = document.getElementById("selection-controls");
  const $cancelSelectionButton = document.getElementById("cancel-selection");

  let selectedTransactions: string[] = JSON.parse(
    localStorage.getItem("selectedTransactions") || "[]"
  );

  if (selectedTransactions.length > 0) {
    $selectionControls!.classList.remove("hidden");
    $selectionControls!.classList.add("flex");
  } else {
    $selectionControls!.classList.remove("flex");
    $selectionControls!.classList.add("hidden");
  }

  $cancelSelectionButton?.addEventListener("click", () => {
    let selectedTransactions: string[] = JSON.parse(
      localStorage.getItem("selectedTransactions") || "[]"
    );

    for (let row of $tableRows) {
      if (selectedTransactions.includes(row.id)) {
        row.classList.remove("bg-main/15");
      }
    }

    localStorage.setItem("selectedTransactions", "[]");
    $selectionControls!.classList.remove("flex");
    $selectionControls!.classList.add("hidden");
  });

  $nextPageButton?.addEventListener("click", (evt) => {
    evt.preventDefault();
    const nextPage = $pageNumber.value;
    window.location.assign(
      window.location.pathname + "?page=" + (+nextPage + 1)
    );
  });

  $previousPageButton?.addEventListener("click", (evt) => {
    evt.preventDefault();
    const previousPage = $pageNumber.value;
    window.location.assign(
      window.location.pathname + "?page=" + (+previousPage - 1)
    );
  });

  for (let row of $tableRows) {
    if (selectedTransactions.includes(row.id)) {
      row.classList.add("bg-main/15");
    }

    row.addEventListener("click", () => {
      let selectedTransactions: string[] = JSON.parse(
        localStorage.getItem("selectedTransactions") || "[]"
      );

      if (!selectedTransactions.includes(row.id)) {
        selectedTransactions.push(row.id);
        row.classList.add("bg-main/15");
      } else {
        selectedTransactions = selectedTransactions.filter(
          (transaction) => transaction !== row.id
        );
        row.classList.remove("bg-main/15");
      }

      if (selectedTransactions.length > 0) {
        $selectionControls!.classList.remove("hidden");
        $selectionControls!.classList.add("flex");
      } else {
        $selectionControls!.classList.remove("flex");
        $selectionControls!.classList.add("hidden");
      }

      localStorage.setItem(
        "selectedTransactions",
        JSON.stringify(selectedTransactions)
      );

      console.log(selectedTransactions);
    });
  }
</script>
